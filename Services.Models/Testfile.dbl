;;*****************************************************************************
;;
;; Title:       Testfile.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure TESTFILE and from the data file DAT:testfile.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection

namespace Services.Models

    public partial class Testfile extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strTestfile
        private mOriginalSynergyData, strTestfile

        private static sMetadata, @TestfileMetadata

.region "Constructors"

        static method Testfile
        proc
            sMetadata = new TestfileMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Testfile), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Testfile
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Testfile
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; ID
        ;;; </summary>
        {Key}
        {Range(0,999999, ErrorMessage="ID must be between 0 and 999999. ")}
        public property Id, int
            method get
            proc
                mreturn (int)mSynergyData.id
            endmethod
            method set
            proc
                mSynergyData.id = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; History date field
        ;;; </summary>
        public property HistoryDate, string
            method get
            proc
                mreturn RsacHistoryDateConverter.Convert(mSynergyData.history_date)
            endmethod
            method set
            proc
                mSynergyData.history_date = RsacHistoryDateConverter.ConvertBack(value)
            endmethod
        endproperty

        ;;; <summary>
        ;;; History time field
        ;;; </summary>
        public property HistoryTime, string
            method get
            proc
                mreturn RsacHistoryTimeConverter.Convert(mSynergyData.history_time)
            endmethod
            method set
            proc
                mSynergyData.history_time = RsacHistoryTimeConverter.ConvertBack(value)
            endmethod
        endproperty

        ;;; <summary>
        ;;; History period field
        ;;; </summary>
        {Range(0,99, ErrorMessage="History period field must be between 0 and 99. ")}
        public property HistoryPeriod, int
            method get
            proc
                mreturn RsacHistoryPeriodConverter.Convert(mSynergyData.history_period)
            endmethod
            method set
            proc
                mSynergyData.history_period = RsacHistoryPeriodConverter.ConvertBack(value)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Y/N Boolean Field
        ;;; </summary>
        {StringLength(1, ErrorMessage="Y/N Boolean Field cannot exceed 1 characters. ")}
        public property YnBoolean, boolean
            method get
            proc
                mreturn RsacYnBooleanConverter.Convert(mSynergyData.yn_boolean)
            endmethod
            method set
            proc
                mSynergyData.yn_boolean = RsacYnBooleanConverter.ConvertBack(value)
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
        proc
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[5]
        endmethod


        private partial method ValidateCustom, void
            required in vType, ValidationType
            required in sp, @IServiceProvider
        endmethod

.endregion

.region "Properties to represent keys"

        ;;Access keys

        private _KEY_ID, string, ""
        public readonly property KEY_ID, string, ""


.endregion

endclass

endnamespace
